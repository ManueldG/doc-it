<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: ab6785b01ce1006e3a9761988575289f40c9b678 Maintainer: ManueldG Status: ready -->
<!-- splitted from ./index.xml, last change in rev 1.66 -->


<chapter xml:id="security.variables" xmlns="http://docbook.org/ns/docbook">
 <title>Dati inviati dall'utente</title>
  <para>
   La più grande debolezza di molti programmi scritti in <acronym>PHP</acronym>
   non è insita nel linguaggio, ma semplicemente un problema di codice scritto 
   non tenendo a mente la sicurezza. Per questo motivo, dovresti sempre prenderti 
   il ​​tempo di considerare le implicazioni di una certa parte di codice, per 
   accertare il possibile malfunzionamento se gli viene inviata una variabile
   inaspettata.
  <example>
  <title>Utilizzo pericoloso delle variabili</title> 
   <programlisting role="php">
<![CDATA[
<?php
// rimuovere un file dalla propria home directory... o forse
// di qualcun altro?
unlink ($evil_var);

//Scrivere il log d'accesso... o magari una voce di /etc/passwd?
fwrite ($fp, $evil_var);

//Eseguire qualcosa di innocuo o rm -rf *?
system ($evil_var);
exec ($evil_var);

?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Bisognerebbe esaminare attentamente il codice per assicurarci
  che tutte le variabili inviate da un browser web siano state correttamente
  controllate e porsi le seguenti domande:  
  <itemizedlist>
   <listitem>
    <simpara>
     Questo script avrà effetto solo sui file previsti?
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Può un dato indesiderato o inusuale interferire con il funzionamento? 
    </simpara>
   </listitem>
   <listitem>
   <simpara>
     Questo script può essere utilizzato in modi non previsti?
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Può essere usato insieme ad altri script in modo dannoso?
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Le transazioni verranno adeguatamente tracciate?
    </simpara>
   </listitem>
  </itemizedlist>
 </para>
 <para>
  Ponendosi queste domande durante la scrittura dello script,
  piuttosto che farsele dopo, si previene una difficile riscrittura quando
  invece si ha bisogno di migliorarne la sicurezza. Iniziando a usare queste
  regole, non si garantisce la sicurezza del sistema, ma si può contribuire a
  migliorarlo.
 </para>
 <para>
  Si potrebbe anche voler disattivare register_globals,
  magic_quotes o altre impostazioni utili che potrebbero 
  renderne meno chiare la validità, la fonte o il valore
  di una determinata variabile. Lavorare con 
  <acronym>PHP</acronym> in modalità error_reporting(E_ALL) può 
  anche aiutare ad informare sulle variabili utilizzate prima che vengano 
  controllate o inizializzate (in modo da impedire che vengano utilizzati
  dati insoliti).
 </para>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
