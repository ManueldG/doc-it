<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 7104ee97ced1768a3231588dfc0bc0d7eb1117ad Maintainer: pastore Status: ready -->

<sect1 xml:id="control-structures.match" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>match</title>
 <?phpdoc print-version-for="match"?>
 <para>
  La valutazione dei rami dell'espressione <literal>match</literal> basata su un
  controllo di identità di un valore.
  Analogamente a un'istruzione <literal>switch</literal>, un'
  espressione <literal>match</literal> ha un'espressione soggetto che viene
  confrontata con più alternative. A differenza di <literal>switch</literal>,
  restituirà un valore molto simile alle espressioni ternarie.
  A differenza di <literal>switch</literal>, il confronto è un controllo di identità
  (<code>===</code>) piuttosto che un controllo di uguaglianza debole (<code>==</code>).
  Le espressioni di corrispondenza sono disponibili a partire da PHP 8.0.0.
 </para>

 <example>
  <title>Structure of a <literal>match</literal> expression</title>
  <programlisting role="php">
<![CDATA[
<?php
$return_value = match (subject_expression) {
    single_conditional_expression => return_expression,
    conditional_expression1, conditional_expression2 => return_expression,
};
?>
]]>
  </programlisting>

  <note>
   <simpara>
    Non è necessario utilizzare il risultato di un'espressione <literal>match</literal>.
   </simpara>
  </note>
  <note>
   <simpara>
    Un'espressione <literal>match</literal> <emphasis>deve</emphasis> essere
    terminata da un punto e virgola <literal>;</literal>.
   </simpara>
  </note>
 </example>

 <para>
  L'espressione <literal>match</literal> è simile a un'
  istruzione <literal>switch</literal> ma presenta alcune differenze fondamentali:
  
  <itemizedlist>
   <listitem>
    <simpara>
     Un braccio <literal>match</literal> confronta i valori rigorosamente (<code>===</code>) invece
     che vagamente come fa l'istruzione switch.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Un'espressione <literal>match</literal> restituisce un valore.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Le braccia <literal>match</literal> non ricadono in casi successivi come
     fanno le istruzioni <literal>switch</literal>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Un'espressione <literal>match</literal> deve essere esaustiva.
    </simpara>
   </listitem>
  </itemizedlist>
 </para>

 <para>
  Come le istruzioni <literal>switch</literal>, le espressioni
  <literal>match</literal> vengono eseguite braccio di confronto per braccio di confronto.
  All'inizio non viene eseguito alcun codice.
  Le espressioni condizionali vengono valutate solo se tutte le espressioni condizionali
  precedenti non sono riuscite a corrispondere all'espressione del soggetto.
  Verrà valutata solo l'espressione di ritorno corrispondente all'espressione
  condizionale corrispondente.
  Per esempio:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$result = match ($x) {
    foo() => ...,
    $this->bar() => ..., // bar() non viene chiamata se foo() === $x
    $this->baz => beep(), // beep() non è chiamata a meno che $x === $this->baz
    // etc.
};
?>
]]>
   </programlisting>
  </informalexample>
 </para>

 <para>
  I bracci delle espressioni <literal>match</literal> possono contenere più espressioni
  separate da una virgola.  Questo è un OR logico, ed è una scorciatoia per più
  bracci di corrispondenza con lo stesso lato destro.
 </para>
 <para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$result = match ($x) {
    // Questo braccio di corrispondenza:
    $a, $b, $c => 5,
    // È equivalente a questi tre bracci di corrispondenza:
    $a => 5,
    $b => 5,
    $c => 5,
};
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Un caso speciale è il pattern <literal>default</literal>.
  Questo modello corrisponde a tutto ciò che non era stato precedentemente trovato.
  Per esempio:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$expressionResult = match ($condition) {
    1, 2 => foo(),
    3, 4 => bar(),
    default => baz(),
};
?>
]]>
   </programlisting>
  </informalexample>
  <note>
   <simpara>
    Più pattern predefiniti solleveranno un
    errore <constant>E_FATAL_ERROR</constant>.
   </simpara>
  </note>
 </para>

 <para>
  Un'espressione <literal>match</literal> deve essere esaustiva.  Se l'
  espressione del soggetto non è gestita da alcun braccio di corrispondenza, viene
  lanciato un <classname>UnhandledMatchError</classname>.
 </para>

 <example>
  <title>Esempio di un'espressione di corrispondenza non gestita</title>
  <programlisting role="php">
<![CDATA[
<?php
$condition = 5;

try {
    match ($condition) {
        1, 2 => foo(),
        3, 4 => bar(),
    };
} catch (\UnhandledMatchError $e) {
    var_dump($e);
}
?>
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
object(UnhandledMatchError)#1 (7) {
  ["message":protected]=>
  string(33) "Unhandled match value of type int"
  ["string":"Error":private]=>
  string(0) ""
  ["code":protected]=>
  int(0)
  ["file":protected]=>
  string(9) "/in/ICgGK"
  ["line":protected]=>
  int(6)
  ["trace":"Error":private]=>
  array(0) {
  }
  ["previous":"Error":private]=>
  NULL
}
]]>
  </screen>
 </example>

 <sect2>
  <title>Utilizzo di espressioni di corrispondenza per gestire i controlli non di identità</title>
  <para>
   È possibile utilizzare un'espressione <literal>match</literal> per gestire
   casi condizionali non di identità utilizzando <code>true</code> come espressione
   del soggetto.
  </para>

  <example>
   <title>Utilizzo di espressioni di corrispondenza generalizzate per ramificare su intervalli interi</title>
   <programlisting role="php">
<![CDATA[
<?php

$age = 23;

$result = match (true) {
    $age >= 65 => 'senior',
    $age >= 25 => 'adult',
    $age >= 18 => 'young adult',
    default => 'kid',
};

var_dump($result);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(11) "young adult"
]]>
   </screen>
  </example>

  <example>
   <title>Utilizzo di espressioni di corrispondenza generalizzate per ramificare sul contenuto della stringa</title>
   <programlisting role="php">
<![CDATA[
<?php

$text = 'Bienvenue chez nous';

$result = match (true) {
    str_contains($text, 'Welcome') || str_contains($text, 'Hello') => 'en',
    str_contains($text, 'Bienvenue') || str_contains($text, 'Bonjour') => 'fr',
    // ...
};

var_dump($result);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(2) "fr"
]]>
   </screen>
  </example>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
